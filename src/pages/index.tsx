import Head from 'next/head';
import styles from '@/styles/Home.module.css';
import { InferGetStaticPropsType } from 'next';
import ProductCard from '@/components/ProductCard';

import { extendFields, getClient } from '@kodadot1/uniquery';
import Header from '@/components/Header';
import { MultipleItems, Item } from '@/helper/types';
import Footer from '@/components/Footer';
import { ownedItemsAnalysis, shortAddress, getFloorPrice, formatBalance } from '@/helper';
import { getItemsListByCollection, getcollectionById } from '@/helper/asyncCalls';

//const COLLECTION_ID: string = process.env.COLLECTION_ID as string;

const COLLECTION_ID: string = '1825819407';

export const getStaticProps = async () => {
  let items: Item[] | undefined = await getItemsListByCollection(COLLECTION_ID, 'bsx');
  //let test = 0;

  return {
    props: { items },
  };
};

export default function Home({
  items,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  if (typeof items == 'undefined') {
    return <>Data unaccessible</>;
  }

  let collectionSize = items.length;
  let sellableItems = items.filter((item) => item.price > 0).length;
  let neverSoldItems = items.filter((item) => item.issuer === item.currentOwner).length;
  let ownerAnalysis = ownedItemsAnalysis(items);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div
        className="w-11/12 max-w-5xl mx-auto mt-28"
        aria-labelledby="information-heading"
      >
        <div className="flex items-center justify-between">
          <h2 className="py-5 text-3xl">
            Collection Id:  {COLLECTION_ID}
          </h2>
          <h4 className="py-5 text-2xl">
            Chain: BSX
          </h4>
        </div>
        <div className="py-2 text-2xl"> Name:  <span className='font-semibold'> {items[0]?.name}</span> </div>
        <div className="py-2 text-xl"> Description:  {items[0]?.meta?.description} </div>
        <div className="py-3 text-2xl font-semibold"> General Statistics </div>
        <div className='grid grid-cols-2'>
          <div className='py-2 text-xl'>Floor price: {getFloorPrice(items)} KSM</div>
          <div className='py-2 text-xl'>Items in collection: {collectionSize}</div>
          <div className='py-2 text-xl'>Percentage of never sold items: {(neverSoldItems / collectionSize).toFixed(2)} %</div>
          <div className='py-2 text-xl'>Items for sale: {sellableItems}</div>
          <div className='py-2 text-xl'>Number of owners: {ownerAnalysis.length}</div>
        </div>

        <div className='py-4 text-2xl font-semibold '>Owner distribution:</div>
        <div className='grid grid-cols-1'>
            <div className='flex items-center justify-between mt-3'>
              <p className='text-gray-800 font-bold text-lg'> 
                Address
              </p>
              <p className='text-gray-800 font-bold text-lg'> 
                Percentage of Collection
              </p>
              <p className='text-gray-800 font-bold text-lg'> 
                Nb. of Items Owned
              </p>
            </div>
          {ownedItemsAnalysis(items).map((item) => (
            <div key={item.owner} className='flex items-center justify-between mt-3'>
              <p className='text-gray-800 font-medium text-lg'> 
                {shortAddress(item.owner)}
              </p>
              <p className='text-gray-800 font-medium text-lg'> 
                {Math.round(item.nbOfItems/collectionSize*100)}%
              </p>
              <p className='text-gray-800 font-medium text-lg'> 
                {item.nbOfItems} 
              </p>
            </div>
          ))}
        </div>
      </div>
      <Footer />
    </>
  );
}
